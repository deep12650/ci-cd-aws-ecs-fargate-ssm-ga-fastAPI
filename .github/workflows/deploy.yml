name: CI/CD to ECS Fargate (HTTPS)

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:

permissions:
  contents: read
  id-token: write

env:
  AWS_REGION: ${{ vars.AWS_REGION }}
  AWS_ACCOUNT_ID: ${{ vars.AWS_ACCOUNT_ID }}
  AWS_ROLE_TO_ASSUME: ${{ secrets.AWS_ROLE_TO_ASSUME }}
  ECR_REPOSITORY: ${{ vars.ECR_REPOSITORY }}
  ECS_CLUSTER: ${{ vars.ECS_CLUSTER }}
  ECS_SERVICE: ${{ vars.ECS_SERVICE }}
  TASK_DEF_FAMILY: ${{ vars.TASK_DEF_FAMILY }}
  CONTAINER_NAME: ${{ vars.CONTAINER_NAME }}
  IMAGE_TAG: ${{ github.sha }}

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Ensure jq is available
        run: |
          if ! command -v jq >/dev/null 2>&1; then
            sudo apt-get update -y && sudo apt-get install -y jq
          fi

      - name: Configure AWS credentials (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ env.AWS_ROLE_TO_ASSUME }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, tag and push image to ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        run: |
          IMAGE_URI=${ECR_REGISTRY}/${ECR_REPOSITORY}:${IMAGE_TAG}
          docker build -t ${IMAGE_URI} .
          docker push ${IMAGE_URI}
          docker tag ${IMAGE_URI} ${ECR_REGISTRY}/${ECR_REPOSITORY}:latest
          docker push ${ECR_REGISTRY}/${ECR_REPOSITORY}:latest
          echo "image_uri=${IMAGE_URI}" >> $GITHUB_OUTPUT

      - name: Fetch current task definition
        id: taskdef
        run: |
          aws ecs describe-task-definition             --task-definition "${TASK_DEF_FAMILY}"             --query 'taskDefinition' > task-def.json
          cat task-def.json

      - name: Render new task definition (update image)
        run: |
          NEW_IMAGE="${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }}"
          jq 'del(.taskDefinitionArn, .revision, .status, .requiresAttributes, .compatibilities, .registeredAt, .registeredBy)' task-def.json             | jq --arg IMG "$NEW_IMAGE" '.containerDefinitions[0].image = $IMG' > new-task-def.json
          cat new-task-def.json

      - name: Register new task definition
        id: register
        run: |
          ARN=$(aws ecs register-task-definition --cli-input-json file://new-task-def.json --query 'taskDefinition.taskDefinitionArn' --output text)
          echo "task_def_arn=${ARN}" >> $GITHUB_OUTPUT

      - name: Update ECS Service
        run: |
          aws ecs update-service             --cluster "${ECS_CLUSTER}"             --service "${ECS_SERVICE}"             --task-definition "${{ steps.register.outputs.task_def_arn }}"
          aws ecs wait services-stable --cluster "${ECS_CLUSTER}" --services "${ECS_SERVICE}"
